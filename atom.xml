<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Evan Oxfeld]]></title>
  <link href="http://EvanOxfeld.github.com/atom.xml" rel="self"/>
  <link href="http://EvanOxfeld.github.com/"/>
  <updated>2014-05-23T15:19:12-04:00</updated>
  <id>http://EvanOxfeld.github.com/</id>
  <author>
    <name><![CDATA[Evan Oxfeld]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Ways to Improve Pull Requests to Private Projects]]></title>
    <link href="http://EvanOxfeld.github.com/blog/2014/05/23/5-ways-to-improve-pull-requests-to-private-projects/"/>
    <updated>2014-05-23T16:00:00-04:00</updated>
    <id>http://EvanOxfeld.github.com/blog/2014/05/23/5-ways-to-improve-pull-requests-to-private-projects</id>
    <content type="html"><![CDATA[<p>At <a href="http://www.vbrick.com">VBrick</a> we&#8217;ve hosted our private projects on GitHub
Enterprise for the last few months. Pull requests are the team&#8217;s code review
step so only blessed changes end up merged into our mainline branch. Even though
team members have mixed levels of git and GitHub experience, the current
process is as lightweight as it gets &#8211; any developer on the project can submit
or merge a pull request.</p>

<p>The following are some best practices I&#8217;ve learned from my experience using GitHub for
private as well as open source projects. Many open source lessons carry over &#8211;
if you think about it, submitting a pull request to Twitter Bootstrap to add
semicolons to their JavaScript and submitting sweeping coding style changes to your
team&#8217;s project are both wastes of time.</p>

<p>I assume the reader has basic working knowledge of git, GitHub, and what makes
for a good commit / commit message.</p>

<h2>Actually use pull requests</h2>

<p>Pull requests encourage critical discussion around code changes, improve code quality,
and increase team knowledge of the codebase. When pull requests are merged, team
members and project watchers are notified that the repository was updated with
blessed changes. What&#8217;s not to like?</p>

<h2>Make your pull requests small and easy to review</h2>

<p>As the contributer of a pull request, you&#8217;re the expert on your changes. Therefore
to spread knowledge and receive meaningful feedback you should strive to make life
as easy as possible for reviewers.</p>

<p>Use a concise title. If you don&#8217;t use GitHub issues, link to the issue in your
project&#8217;s issue tracker. Summarize what has changed and why the changes are necessary,
particularly if the pull request is large or if the issue&#8217;s implementation is not
obvious.</p>

<p>When possible, don&#8217;t submit a massive pull request. Submit separate pull requests for
each logical set of changes. Within the pull request, strive for commits that are atomic &#8211;
that is, the the commit represents a single refactoring or distinct change to the system.</p>

<h2>Collaborate before the pull request</h2>

<p>Whether in person or remote, discuss the design of a feature implementation or bug fix
prior to submitting a pull request. If you&#8217;re like me and find pair programming
effective, work as a pair before submitting the pull request.</p>

<h2>Keep the process lightweight</h2>

<p>The freedom that any developer on my project can merge any of the project&#8217;s pull
requests at times resembles anarchy. That said, assigning reviewers to
pull requests would create a bottleneck for my team. On a private project, the
contributor of a pull request is the expert on the changes and the person with
the most skin in the game to ensure the pull request is reviewed and merged
in a timely fashion.</p>

<p>As a developer, if you don&#8217;t know who should review a pull request, ask.</p>

<h2>Use forks</h2>

<p>Resist the temptation to work on separate branches in a shared repository. As
a developer, it&#8217;s easier to experiment when forks are treated as sandboxes and
branches in forks considered public history is the exception rather than the rule.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should Node-Unzip Have a Future?]]></title>
    <link href="http://EvanOxfeld.github.com/blog/2014/05/01/should-node-unzip-have-a-future/"/>
    <updated>2014-05-01T21:18:00-04:00</updated>
    <id>http://EvanOxfeld.github.com/blog/2014/05/01/should-node-unzip-have-a-future</id>
    <content type="html"><![CDATA[<p><strong><em>Cross posted from <a href="https://github.com/EvanOxfeld/node-unzip/issues/50">https://github.com/EvanOxfeld/node-unzip/issues/50</a></em></strong></p>

<p>I continue to be floored by the response to <a href="https://github.com/EvanOxfeld/node-unzip">node-unzip</a>. While the original implementation was written on a lark, I carried on as a means to better understand streams, arguably the killer feature of NodeJS. Since that time, I&#8217;ve changed companies, ceased personally using this library, and experienced a number of major life events, particularly becoming a father.</p>

<p>I also learned that the zip format is problematic and cannot be perfectly streamed &#8211; see this Apache <a href="http://commons.apache.org/proper/commons-compress/zip.html">doc</a>. That said, if despite the major hangups as well as quality non-streaming NodeJS modules, such as decompress, there&#8217;s continued interest in this project, I&#8217;ll work to take the project to a stable 1.0.0, merge outstanding pull requests, and most importantly, seek collaborators who use this library in production.</p>

<p>Thank you and let me know your thoughts on the <a href="https://github.com/EvanOxfeld/node-unzip/issues/50">project on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sneakernet Solved with Git Bundle]]></title>
    <link href="http://EvanOxfeld.github.com/blog/2013/01/30/sneakernet-solved-with-git-bundle/"/>
    <updated>2013-01-30T22:48:00-05:00</updated>
    <id>http://EvanOxfeld.github.com/blog/2013/01/30/sneakernet-solved-with-git-bundle</id>
    <content type="html"><![CDATA[<p>Recently I wanted to transfer a presentation from
one machine to another, and unfortunately I was
unable to connect to the Internet. Similar to life when it
was entirely offline or whenever Github is vexingly
down, I was in a classic <em>sneakernet</em> scenario. If you
haven&#8217;t heard the term, <em>sneakernet</em> is slang for
walking media such as a disk or USB flash drive from
one machine to another in order to transfer files.
Bonus points if you bring a pedometer along.</p>

<p>Ordinarily I&#8217;d copy the presentation onto a USB stick,
transfer the presentation to the second computer, and
be done. In a feeble attempt at version control, maybe
I would have renamed the file &#8220;Presentation DRAFT1
FINAL&#8221;. However, this time my presentation was in
HTML/JavaScript and already version controlled with
Git. While I could use git to create and apply patches
across to the unconnected machine, there&#8217;s an easier
way - <em>git bundle</em>.</p>

<h2>Create the Git Bundle</h2>

<p>Think of <em>git bundle</em> as zipping or tarring up your
repository with benefits - namely that you can transfer
the exact git objects that store your commits, branches,
and tags. A git bundle mimics a remote, enabling
fetching, pulling, and diffing between machines that
aren&#8217;t otherwise connected.</p>

<p>To create a bundle named &#8220;repo.bundle&#8221; containing
each and every commit in the master branch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git bundle create repo.bundle master</span>
</span></code></pre></td></tr></table></div></figure>


<p>Especially if you anticipate transferring more commits
in the future, tag the current commit on master.</p>

<h2>Clone the Bundle on the Second Machine</h2>

<p>If the repository does not already exist on the
second machine, it&#8217;s easiest to clone directly from
the bundle.</p>

<p>To clone into the directory &#8220;myRepo&#8221; and check out
the branch master:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git clone repo.bundle myRepo -b master</span>
</span></code></pre></td></tr></table></div></figure>


<p>Verify the master branch. My preferred method is
viewing a graph of the commits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git log --oneline --decorate --graph</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Transferring Additional Commits</h2>

<p>We could once again bundle the entirety of the master
branch and do a git clone on the second machine, but
we&#8217;d sacrifice any additional work on that box.
Instead, bundle master starting from the previous
bundle&#8217;s most recent commit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git bundle create more.bundle lastBundleTag..master</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the second machine, verify the bundle then pull
the contents into master:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git bundle verify more.bundle</span>
</span><span class='line'><span class="go">git pull more.bundle master</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once again, verify the master branch and the recently
transferred commits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">git log --oneline --decorate --graph</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Using git bundle makes version controlling repositories
across unconnected machines simple. Additionally, all
the elements of the git workflow remain at your beck
and call. For example, consider creating a long
running branch for changes that are only applicable to
the second machine for reasons such as easy diffing
between machines.</p>
]]></content>
  </entry>
  
</feed>
